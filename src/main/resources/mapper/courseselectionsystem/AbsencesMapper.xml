<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xxxy.no1.courseselectionsystem.mapper.AbsencesMapper">
    
    <resultMap type="Absences" id="AbsencesResult">
        <result property="absenceId"    column="absence_id"    />
        <result property="studentId"    column="student_id"    />
        <result property="courseId"    column="course_id"    />
        <result property="absenceDate"    column="absence_date"    />
        <result property="absenceReason"    column="absence_reason"    />
        <result property="approvalStatus"    column="approval_status"    />
        <result property="teacherId"    column="teacher_id"    />
    </resultMap>

    <sql id="selectAbsencesVo">
        select absence_id, student_id, course_id, absence_date, absence_reason, approval_status, teacher_id from absences
    </sql>

    <select id="selectAbsencesList" parameterType="Absences" resultMap="AbsencesResult">
        <include refid="selectAbsencesVo"/>
        <where>  
            <if test="studentId != null "> and student_id = #{studentId}</if>
            <if test="courseId != null "> and course_id = #{courseId}</if>
            <if test="absenceDate != null "> and absence_date = #{absenceDate}</if>
            <if test="absenceReason != null  and absenceReason != ''"> and absence_reason = #{absenceReason}</if>
            <if test="approvalStatus != null  and approvalStatus != ''"> and approval_status = #{approvalStatus}</if>
            <if test="teacherId != null "> and teacher_id = #{teacherId}</if>
        </where>
    </select>
    
    <select id="selectAbsencesByAbsenceId" parameterType="Integer" resultMap="AbsencesResult">
        <include refid="selectAbsencesVo"/>
        where absence_id = #{absenceId}
    </select>
        
    <insert id="insertAbsences" parameterType="Absences" useGeneratedKeys="true" keyProperty="absenceId">
        insert into absences
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="studentId != null">student_id,</if>
            <if test="courseId != null">course_id,</if>
            <if test="absenceDate != null">absence_date,</if>
            <if test="absenceReason != null">absence_reason,</if>
            <if test="approvalStatus != null">approval_status,</if>
            <if test="teacherId != null">teacher_id,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="studentId != null">#{studentId},</if>
            <if test="courseId != null">#{courseId},</if>
            <if test="absenceDate != null">#{absenceDate},</if>
            <if test="absenceReason != null">#{absenceReason},</if>
            <if test="approvalStatus != null">#{approvalStatus},</if>
            <if test="teacherId != null">#{teacherId},</if>
         </trim>
    </insert>

    <update id="updateAbsences" parameterType="Absences">
        update absences
        <trim prefix="SET" suffixOverrides=",">
            <if test="studentId != null">student_id = #{studentId},</if>
            <if test="courseId != null">course_id = #{courseId},</if>
            <if test="absenceDate != null">absence_date = #{absenceDate},</if>
            <if test="absenceReason != null">absence_reason = #{absenceReason},</if>
            <if test="approvalStatus != null">approval_status = #{approvalStatus},</if>
            <if test="teacherId != null">teacher_id = #{teacherId},</if>
        </trim>
        where absence_id = #{absenceId}
    </update>

    <delete id="deleteAbsencesByAbsenceId" parameterType="Integer">
        delete from absences where absence_id = #{absenceId}
    </delete>

    <delete id="deleteAbsencesByAbsenceIds" parameterType="String">
        delete from absences where absence_id in 
        <foreach item="absenceId" collection="array" open="(" separator="," close=")">
            #{absenceId}
        </foreach>
    </delete>
</mapper>